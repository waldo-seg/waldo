A Brief Introduction
---------------------------------------
The aim of this task is speed up waldo segmenter. We convert the python code
into C++ code. As we use numpy array to store the data, so we use "cython" as
an interface to complete the communication between the major python code which
is used to prepared data and the C++ segmenter code.
The following is a digression:
As far as I known, this task also can be completed with "ctypes". In
substance, numpy array is allocated in a continuous space in memory.




A Brief Introduction of the files
---------------------------------------
1)setup.py: is used to setup the compile information, such as "--std=c++11".
            If you want to change any compile argument, please check the home
            page of cython.
2)c_segment.pyx: For cython file, the ".pyx" suffix is necessary. In this file
                 we define the interface between python and c++ code.
3)segment.h : Currently, we define class Object, class AdjacencyRecord and
              class ObjectSegmenter. Some simple inline functions are
              implemented in this file.
4)segment.cc : The main functions are implemented in it.




How to compile
---------------------------------------
1) Please use the following command to compile the code:
python setup.py build_ext --inplace
If the compilation is passed, we will get a build folder, a "c_segment.cpp"
file and a "c_segment.***.so" dynamic library.

2) If you modify the segment.cc file. Remember to compile it.

3) If you only modify the segment.h file. Rmemeber to delete the generated
files, an then recompile it.




How to use it
---------------------------------------
You can use the following code to instead previous python version code:

"""
import csegment.c_segment as cseg

if args.object_merge_factor is None:
    args.object_merge_factor = 1.0 / len(offset_list)

class_pred_in = 
  class_pred[0].detach().numpy().astype(np.float32)
adj_pred_in =
  adj_pred[0].detach().numpy().astype(np.float32)
    
mask, object_class = cseg.run_segmentation(class_pred_in,
                                           adj_pred_in,
                                           num_classes,
                                           offset_list,
                                           args.same_different_bias,
                                           args.object_merge_factor,
                                           args.merge_logprob_bias)
"""
